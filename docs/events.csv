Category,Event Type,Method/API,Event Name/Path,Parameters/Payload,Description,Example
Pinia Stores,$subscribe(),window.$pinia.auth.$subscribe,Auth Store Changes,mutation & state with isLoggedIn,Triggered when authentication state changes,$pinia.auth.$subscribe((mutation\, state) => { console.log(state.isLoggedIn); })
Pinia Stores,$subscribe(),window.$pinia.location.$subscribe,Location Store Changes,mutation & state with lastLocation,Triggered when user location changes (travel/world join),$pinia.location.$subscribe((mutation\, state) => { console.log(state.lastLocation); })
Pinia Stores,$subscribe(),window.$pinia.game.$subscribe,Game Store Changes,mutation & state with isGameRunning,Triggered when VRChat game running status changes,$pinia.game.$subscribe((mutation\, state) => { console.log(state.isGameRunning); })
Pinia Stores,$subscribe(),window.$pinia.gameLog.$subscribe,GameLog Store Changes,mutation & state with gameLogSessionTable,Triggered when game log entries are added (joins/leaves),$pinia.gameLog.$subscribe((mutation\, state) => { console.log(state.gameLogSessionTable); })
Pinia Stores,$subscribe(),window.$pinia.friend.$subscribe,Friend Store Changes,mutation & state with friends/offlineFriends,Triggered when friend list or friend status changes,$pinia.friend.$subscribe((mutation\, state) => { console.log(state.friends); })
Pinia Stores,$subscribe(),window.$pinia.notification.$subscribe,Notification Store Changes,mutation & state with notifications,Triggered when VRChat notifications are received,$pinia.notification.$subscribe((mutation\, state) => { console.log(state.notifications); })
Pinia Stores,$subscribe(),window.$pinia.user.$subscribe,User Store Changes,mutation & state with currentUser/cachedUsers,Triggered when user data is updated,$pinia.user.$subscribe((mutation\, state) => { console.log(state.currentUser); })
Pinia Stores,$subscribe(),window.$pinia.world.$subscribe,World Store Changes,mutation & state with cachedWorlds,Triggered when world data is cached or updated,$pinia.world.$subscribe((mutation\, state) => { console.log(state.cachedWorlds); })
Pinia Stores,$subscribe(),window.$pinia.avatar.$subscribe,Avatar Store Changes,mutation & state with cachedAvatars,Triggered when avatar data is cached or updated,$pinia.avatar.$subscribe((mutation\, state) => { console.log(state.cachedAvatars); })
Pinia Stores,$subscribe(),window.$pinia.instance.$subscribe,Instance Store Changes,mutation & state with cachedInstances,Triggered when instance data is cached,$pinia.instance.$subscribe((mutation\, state) => { console.log(state.cachedInstances); })
Pinia Stores,$subscribe(),window.$pinia.group.$subscribe,Group Store Changes,mutation & state with cachedGroups,Triggered when VRChat group data is cached or updated,$pinia.group.$subscribe((mutation\, state) => { console.log(state.cachedGroups); })
Pinia Stores,$subscribe(),window.$pinia.favorite.$subscribe,Favorite Store Changes,mutation & state with favoriteFriends/favoriteWorlds,Triggered when favorites are added/removed,$pinia.favorite.$subscribe((mutation\, state) => { console.log(state.favoriteWorlds); })
Pinia Stores,$subscribe(),window.$pinia.ui.$subscribe,UI Store Changes,mutation & state with menuActiveIndex,Triggered when UI state changes (active menu/dialog),$pinia.ui.$subscribe((mutation\, state) => { console.log(state.menuActiveIndex); })
Pinia Stores,$subscribe(),window.$pinia.vr.$subscribe,VR Store Changes,mutation & state with vrOverlayMode/vrMode,Triggered when VR overlay settings change,$pinia.vr.$subscribe((mutation\, state) => { console.log(state.vrOverlayMode); })
Pinia Stores,$subscribe(),window.$pinia.photon.$subscribe,Photon Store Changes,mutation & state with currentInstance,Triggered when Photon network data updates,$pinia.photon.$subscribe((mutation\, state) => { console.log(state.currentInstance); })
Pinia Stores,$subscribe(),window.$pinia.moderation.$subscribe,Moderation Store Changes,mutation & state with cachedPlayerModerations,Triggered when player moderations are updated (show/hide avatars),$pinia.moderation.$subscribe((mutation\, state) => { console.log(state.cachedPlayerModerations); })
Pinia Stores,$subscribe(),window.$pinia.feed.$subscribe,Feed Store Changes,mutation & state with notificationFeed,Triggered when notification feed updates,$pinia.feed.$subscribe((mutation\, state) => { console.log(state.notificationFeed); })
Pinia Stores,$subscribe(),window.$pinia.invite.$subscribe,Invite Store Changes,mutation & state with receivedInvites/sentInvites,Triggered when invites are sent or received,$pinia.invite.$subscribe((mutation\, state) => { console.log(state.receivedInvites); })
Pinia Stores,$subscribe(),window.$pinia.launch.$subscribe,Launch Store Changes,mutation & state with launchOptions,Triggered when VRChat launch options change,$pinia.launch.$subscribe((mutation\, state) => { console.log(state.launchOptions); })
Pinia Stores,$subscribe(),window.$pinia.vrcx.$subscribe,VRCX Store Changes,mutation & state with ipcEnabled/databaseVersion,Triggered when VRCX internal settings change,$pinia.vrcx.$subscribe((mutation\, state) => { console.log(state.ipcEnabled); })
Pinia Stores,$subscribe(),window.$pinia.vrcStatus.$subscribe,VRC Status Store Changes,mutation & state with statusHistory,Triggered when VRChat API status updates,$pinia.vrcStatus.$subscribe((mutation\, state) => { console.log(state.statusHistory); })
Pinia Stores,$subscribe(),window.$pinia.search.$subscribe,Search Store Changes,mutation & state with searchResults,Triggered when search results are updated,$pinia.search.$subscribe((mutation\, state) => { console.log(state.searchResults); })
Pinia Stores,$subscribe(),window.$pinia.gallery.$subscribe,Gallery Store Changes,mutation & state with galleryData,Triggered when gallery/screenshots are updated,$pinia.gallery.$subscribe((mutation\, state) => { console.log(state.galleryData); })
Pinia Stores,$subscribe(),window.$pinia.sharedFeed.$subscribe,Shared Feed Store Changes,mutation & state with sharedFeedData,Triggered when shared feed data updates,$pinia.sharedFeed.$subscribe((mutation\, state) => { console.log(state.sharedFeedData); })
Pinia Stores,$subscribe(),window.$pinia.updateLoop.$subscribe,Update Loop Store Changes,mutation & state with updateTimers,Triggered when background update loop state changes,$pinia.updateLoop.$subscribe((mutation\, state) => { console.log(state.updateTimers); })
Pinia Stores,$subscribe(),window.$pinia.avatarProvider.$subscribe,Avatar Provider Store Changes,mutation & state with avatarLookup,Triggered when avatar provider data updates,$pinia.avatarProvider.$subscribe((mutation\, state) => { console.log(state.avatarLookup); })
Pinia Stores - Settings,$subscribe(),window.$pinia.appearance.$subscribe,Appearance Settings Changes,mutation & state with theme/fontSize,Triggered when VRCX appearance settings change,$pinia.appearance.$subscribe((mutation\, state) => { console.log(state.theme); })
Pinia Stores - Settings,$subscribe(),window.$pinia.notifications.$subscribe,Notification Settings Changes,mutation & state with notificationSettings,Triggered when notification preferences change,$pinia.notifications.$subscribe((mutation\, state) => { console.log(state.notificationSettings); })
Pinia Stores - Settings,$subscribe(),window.$pinia.advanced.$subscribe,Advanced Settings Changes,mutation & state with advancedOptions,Triggered when advanced settings are modified,$pinia.advanced.$subscribe((mutation\, state) => { console.log(state.advancedOptions); })
Pinia Stores - Settings,$subscribe(),window.$pinia.general.$subscribe,General Settings Changes,mutation & state with generalOptions,Triggered when general settings are modified,$pinia.general.$subscribe((mutation\, state) => { console.log(state.generalOptions); })
Pinia Stores - Settings,$subscribe(),window.$pinia.discordPresence.$subscribe,Discord Presence Settings Changes,mutation & state with discordSettings,Triggered when Discord Rich Presence settings change,$pinia.discordPresence.$subscribe((mutation\, state) => { console.log(state.discordSettings); })
Pinia Stores - Settings,$subscribe(),window.$pinia.wristOverlay.$subscribe,Wrist Overlay Settings Changes,mutation & state with wristOverlaySettings,Triggered when VR wrist overlay settings change,$pinia.wristOverlay.$subscribe((mutation\, state) => { console.log(state.wristOverlaySettings); })
Plugin System - Custom Events,subscribe(),this.subscribe(),LOCATION_CHANGE,{location\, worldName\, worldId},Custom event when location changes (plugin-defined),this.subscribe('LOCATION_CHANGE'\, (data) => { console.log(data.worldName); })
Plugin System - Custom Events,subscribe(),this.subscribe(),FRIEND_ONLINE,{userId\, displayName\, timestamp},Custom event when friend comes online (plugin-defined),this.subscribe('FRIEND_ONLINE'\, (data) => { console.log(data.displayName); })
Plugin System - Custom Events,subscribe(),this.subscribe(),NOTIFICATION_RECEIVED,{type\, senderId\, message},Custom event for VRChat notifications (plugin-defined),this.subscribe('NOTIFICATION_RECEIVED'\, (data) => { console.log(data.type); })
Plugin System - Custom Events,subscribe(),this.subscribe(),GAME_LOG_EVENT,{type\, data\, timestamp},Custom event for game log entries (plugin-defined),this.subscribe('GAME_LOG_EVENT'\, (data) => { console.log(data.type); })
Plugin System - Custom Events,emit(),this.emit(),<any-custom-event>,any payload,Emit custom events that other plugins can subscribe to,this.emit('MY_EVENT'\, { data: 'hello' });
Plugin System - Hooks,registerPreHook(),this.registerPreHook(),window.API.getCurrentUser,(args) => modified args,Intercepts function BEFORE execution and can modify arguments,this.registerPreHook('window.API.getCurrentUser'\, (args) => { console.log('Before API call'); return args; })
Plugin System - Hooks,registerPostHook(),this.registerPostHook(),window.API.getCurrentUser,(result) => modified result,Intercepts function AFTER execution and can modify return value,this.registerPostHook('window.API.getCurrentUser'\, (result) => { console.log('After API call'); return result; })
Plugin System - Hooks,registerPreHook(),this.registerPreHook(),window.$app.methods.showWorldDialog,(args) => modified args,Intercepts VRCX UI methods before execution,this.registerPreHook('window.$app.methods.showWorldDialog'\, (args) => { console.log('Opening world dialog'); return args; })
Plugin System - Hooks,registerPostHook(),this.registerPostHook(),window.API.getWorld,(result) => modified result,Intercepts VRChat API calls after execution,this.registerPostHook('window.API.getWorld'\, (result) => { console.log('World data received'); return result; })
Plugin System - Hooks,registerPreHook(),this.registerPreHook(),AppApi.StartGame,(args) => modified args,Intercepts native AppApi calls before execution,this.registerPreHook('AppApi.StartGame'\, (args) => { console.log('Starting VRChat'); return args; })
Native Events (C# to JS),Native Call,$pinia.vrcStatus.onBrowserFocus,Browser Focus Event,none,Called when VRCX window gains focus,Automatically called by native code - subscribe to store changes
Native Events (C# to JS),Native Call,$pinia.gameLog.addGameLogEvent,Game Log Event,logLine object,Called when new VRChat log line is parsed,Automatically called by native code - subscribe to gameLog store
Native Events (C# to JS),Native Call,$pinia.vrcx.ipcEvent,IPC Event,IPCPacket object with Type/MsgType/Data,Called when IPC message received from external app,Automatically called by native code - subscribe to vrcx store
Native Events (C# to JS),Native Call,$pinia.vrcx.dragEnterCef,File Drag Event,file path string,Called when file is dragged into VRCX window,Automatically called by native code - subscribe to vrcx store
Native Events (C# to JS),Native Call,$pinia.game.updateIsGameRunning,Game Status Event,"isGameRunning, isSteamVRRunning, isHmdAfk",Called when VRChat or SteamVR process state changes,Automatically called by native code - subscribe to game store
Native Events (C# to JS),Native Call,$pinia.vr.vrInit,VR Init Event,empty string,Called when VR overlay initializes,Automatically called by native code - subscribe to vr store
DOM Events,registerListener(),this.registerListener(),click,MouseEvent,Register for DOM click events with auto-cleanup,this.registerListener(element\, 'click'\, (e) => { console.log('Clicked'); })
DOM Events,registerListener(),this.registerListener(),input,InputEvent,Register for input field changes,this.registerListener(input\, 'input'\, (e) => { console.log(e.target.value); })
DOM Events,registerListener(),this.registerListener(),change,Event,Register for select/checkbox changes,this.registerListener(select\, 'change'\, (e) => { console.log('Changed'); })
DOM Events,registerListener(),this.registerListener(),submit,SubmitEvent,Register for form submissions,this.registerListener(form\, 'submit'\, (e) => { e.preventDefault(); })
DOM Events,registerListener(),this.registerListener(),keydown,KeyboardEvent,Register for keyboard events,this.registerListener(document\, 'keydown'\, (e) => { console.log(e.key); })
DOM Events,registerListener(),this.registerListener(),scroll,Event,Register for scroll events,this.registerListener(window\, 'scroll'\, () => { console.log('Scrolled'); })
DOM Events,registerListener(),this.registerListener(),resize,UIEvent,Register for window resize events,this.registerListener(window\, 'resize'\, () => { console.log('Resized'); })
DOM Events,registerListener(),this.registerListener(),focus,FocusEvent,Register for element focus events,this.registerListener(input\, 'focus'\, () => { console.log('Focused'); })
DOM Events,registerListener(),this.registerListener(),blur,FocusEvent,Register for element blur events,this.registerListener(input\, 'blur'\, () => { console.log('Blurred'); })
DOM Events - Custom,registerListener(),this.registerListener(),<custom-event>,CustomEvent,Register for custom browser events,this.registerListener(document\, 'my-event'\, (e) => { console.log(e.detail); })
Observers,registerObserver(),this.registerObserver(),MutationObserver,MutationRecord[],Observe DOM mutations with auto-cleanup,this.registerObserver(new MutationObserver((mutations) => { console.log(mutations); })\, document.body\, { childList: true })
Observers,registerObserver(),this.registerObserver(),IntersectionObserver,IntersectionObserverEntry[],Observe element visibility with auto-cleanup,this.registerObserver(new IntersectionObserver((entries) => { console.log(entries); })\, element)
Observers,registerObserver(),this.registerObserver(),ResizeObserver,ResizeObserverEntry[],Observe element size changes with auto-cleanup,this.registerObserver(new ResizeObserver((entries) => { console.log(entries); })\, element)
Timers,registerTimer(),this.registerTimer(),setTimeout,timeout ID,Register timeout with auto-cleanup on plugin stop,this.registerTimer(setTimeout(() => { console.log('Fired'); }\, 1000))
Timers,registerTimer(),this.registerTimer(),setInterval,interval ID,Register interval with auto-cleanup on plugin stop,this.registerTimer(setInterval(() => { console.log('Tick'); }\, 1000))
Lifecycle,onLogin(),async onLogin(),Plugin Login Hook,none,Called when user successfully logs into VRChat,async onLogin() { console.log('User logged in'); }
Lifecycle,load(),async load(),Plugin Load Hook,none,Called once when plugin is loaded (initialize resources),async load() { console.log('Plugin loaded'); this.settings = ...; }
Lifecycle,start(),async start(),Plugin Start Hook,none,Called when plugin starts (after dependencies loaded),async start() { console.log('Plugin started'); }
Lifecycle,stop(),async stop(),Plugin Stop Hook,none,Called when plugin stops (cleanup if needed),async stop() { console.log('Plugin stopped'); }
Vue Integration,$watch(),watch(),Computed Property Watch,oldValue & newValue,Watch Vue computed properties for changes,watch(() => $pinia.location.lastLocation\, (newVal\, oldVal) => { console.log(newVal); })
Vue Integration,$watch(),watch(),Reactive State Watch,oldValue & newValue,Watch reactive state objects for changes,watch(() => state.someProperty\, (newVal) => { console.log(newVal); })
Vue Integration,watchEffect(),watchEffect(),Reactive Effect,none,Automatically track reactive dependencies and re-run,watchEffect(() => { console.log($pinia.game.isGameRunning); })
Database,SQL Query,SQLite.ExecuteJson(),Database Change,query results,Manually poll database for changes via queries,const result = SQLite.ExecuteJson('SELECT * FROM gamelog_join WHERE created_at > ?'\, {created_at: lastCheck})
Storage,Config Change,VRCXStorage.Get/Set(),Configuration Change,key & value,Monitor for configuration changes by polling or wrapping Set,Use registerPostHook on 'VRCXStorage.Set' to intercept config changes
IPC Events,IPC Message,$pinia.vrcx.ipcEvent,IPC Message Received,"Type, MsgType, Data",External app sends IPC message to VRCX,Subscribe to vrcx store and filter by packet.Type === 'VrcxMessage'
WebSocket - XSOverlay,UDP Message,None (UDP broadcast),XSOverlay Notification Sent,notification payload,Monitor outbound notifications to XSOverlay,Hook AppApi.XSNotification to intercept notification sends
WebSocket - OVRToolkit,WebSocket,None (WebSocket),OVRToolkit Notification Sent,notification payload,Monitor outbound notifications to OVRToolkit,Hook AppApi.OVRTNotification to intercept notification sends
Network Requests,Fetch/XHR,registerPreHook('fetch'),HTTP Request Intercepted,request object,Intercept all fetch requests before execution,this.registerPreHook('window.fetch'\, (args) => { console.log(args[0]); return args; })
Network Requests,Fetch/XHR,registerPostHook('fetch'),HTTP Response Intercepted,response object,Intercept all fetch responses after execution,this.registerPostHook('window.fetch'\, (result) => { console.log(result); return result; })
Cookie Changes,Cookie API,registerPostHook('WebApi.SetCookies'),Cookies Modified,cookies JSON,Called when VRChat authentication cookies change,this.registerPostHook('WebApi.SetCookies'\, (args) => { console.log('Cookies updated'); return args; })
VRChat API,API Call,registerPreHook('window.API.*'),VRChat API Call,API method & args,Intercept any VRChat API call (getUser/getWorld/etc),this.registerPreHook('window.API.getUser'\, (args) => { console.log('Getting user:'\, args); return args; })
VRChat API,API Result,registerPostHook('window.API.*'),VRChat API Result,API response,Intercept any VRChat API response,this.registerPostHook('window.API.getWorld'\, (result) => { console.log('World data:'\, result); return result; })
UI Events,Dialog Open,registerPreHook('$app.methods.show*Dialog'),Dialog Opening,dialog args,Intercept before any dialog opens,this.registerPreHook('window.$app.methods.showUserDialog'\, (args) => { console.log('Opening user dialog'); return args; })
UI Events,Dialog Close,registerPostHook('$app.methods.show*Dialog'),Dialog Closed,dialog result,Intercept after dialog closes,this.registerPostHook('window.$app.methods.showWorldDialog'\, (result) => { console.log('Dialog closed'); return result; })
Clipboard,Clipboard Write,registerPreHook('AppApi.CopyImageToClipboard'),Image Copied to Clipboard,image path,Intercept image copy to clipboard,this.registerPreHook('AppApi.CopyImageToClipboard'\, (args) => { console.log('Copying:'\, args); return args; })
File Operations,File Read,registerPreHook('AppApi.GetFileBase64'),File Read as Base64,file path,Intercept file read operations,this.registerPreHook('AppApi.GetFileBase64'\, (args) => { console.log('Reading:'\, args[0]); return args; })
File Operations,File Write,registerPreHook('AppApi.AddScreenshotMetadata'),Screenshot Metadata Write,path & metadata,Intercept screenshot metadata writes,this.registerPreHook('AppApi.AddScreenshotMetadata'\, (args) => { console.log('Adding metadata'); return args; })
Registry Operations,Registry Read,registerPreHook('AppApi.GetVRChatRegistryKey'),Registry Key Read,key name,Intercept VRChat registry reads,this.registerPreHook('AppApi.GetVRChatRegistryKey'\, (args) => { console.log('Reading key:'\, args[0]); return args; })
Registry Operations,Registry Write,registerPreHook('AppApi.SetVRChatRegistryKey'),Registry Key Write,key & value,Intercept VRChat registry writes,this.registerPreHook('AppApi.SetVRChatRegistryKey'\, (args) => { console.log('Writing key:'\, args); return args; })
Process Control,Game Launch,registerPreHook('AppApi.StartGame'),VRChat Launch,launch arguments,Intercept VRChat game launch,this.registerPreHook('AppApi.StartGame'\, (args) => { console.log('Launch args:'\, args); return args; })
Process Control,Game Quit,registerPreHook('AppApi.QuitGame'),VRChat Quit,none,Intercept VRChat game quit,this.registerPreHook('AppApi.QuitGame'\, () => { console.log('Quitting VRChat'); return []; })
